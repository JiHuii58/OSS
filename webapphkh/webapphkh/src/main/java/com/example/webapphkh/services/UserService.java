package com.example.webapphkh.services;

import com.example.webapphkh.models.User;
import com.example.webapphkh.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // üî• Import th√™m ƒë·ªÉ d√πng @Transactional

import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public Optional<User> getUserById(Long id) {
        return userRepository.findById(id);
    }

    public User findByEmail(String email) {
        return userRepository.findByEmail(email).orElse(null);
    }

    public ResponseEntity<String> registerUser(User user) {
        if (userRepository.findByEmail(user.getEmail()).isPresent()) {
            return ResponseEntity.badRequest().body("Email ƒë√£ t·ªìn t·∫°i!");
        }
       
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
        return ResponseEntity.ok("ƒêƒÉng k√Ω th√†nh c√¥ng!");
    }

    @Transactional // üî• ƒê·∫£m b·∫£o Hibernate session m·ªü khi load progress
    public ResponseEntity<?> loginUser(String email, String password) {
        Optional<User> userOptional = userRepository.findByEmail(email);
        if (userOptional.isEmpty()) {
            return ResponseEntity.status(401).body("Email kh√¥ng t·ªìn t·∫°i!");
        }

        User user = userOptional.get();
        if (!passwordEncoder.matches(password, user.getPassword())) {
            return ResponseEntity.status(401).body("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!");
        }

        // üî• Load progress tr∆∞·ªõc khi tr·∫£ v·ªÅ User
        user.getProgress().size(); // K√≠ch ho·∫°t lazy loading

        return ResponseEntity.ok(user); // Tr·∫£ v·ªÅ user k√®m progress
    }

    @Transactional // üî• ƒê·∫£m b·∫£o Hibernate session m·ªü khi c·∫≠p nh·∫≠t user
    public ResponseEntity<String> updateUser(Long id, User updatedUser) {
        Optional<User> existingUserOptional = userRepository.findById(id);
        if (existingUserOptional.isEmpty()) {
            return ResponseEntity.badRequest().body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
        }

        User existingUser = existingUserOptional.get();
        existingUser.setName(updatedUser.getName());
        existingUser.setEmail(updatedUser.getEmail());
        existingUser.setPassword(passwordEncoder.encode(updatedUser.getPassword()));

        // üî• Load progress n·∫øu c·∫ßn
        existingUser.getProgress().size();

        userRepository.save(existingUser);
        return ResponseEntity.ok("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
    }

    public ResponseEntity<String> deleteUser(Long id) {
        if (!userRepository.existsById(id)) {
            return ResponseEntity.badRequest().body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
        }
        userRepository.deleteById(id);
        return ResponseEntity.ok("X√≥a th√†nh c√¥ng!");
    }
}
